"use strict";(self.webpackChunk_veiled_lg_veiled_lg_github_io=self.webpackChunk_veiled_lg_veiled_lg_github_io||[]).push([[5663],{3905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>s});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),u=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},h=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=u(r),s=n,m=p["".concat(c,".").concat(s)]||p[s]||d[s]||l;return r?a.createElement(m,o(o({ref:t},h),{},{components:r})):a.createElement(m,o({ref:t},h))}));function s(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7930:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const l={sidebar_position:11},o="calc_health_color",i={unversionedId:"lua/render/draw/calc_health_color",id:"lua/render/draw/calc_health_color",title:"calc_health_color",description:"Calculates the color from green to red based on the given health.",source:"@site/docs/lua/render/draw/calc_health_color.md",sourceDirName:"lua/render/draw",slug:"/lua/render/draw/calc_health_color",permalink:"/docs/lua/render/draw/calc_health_color",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"calc_text_size",permalink:"/docs/lua/render/draw/calc_text_size"},next:{title:"Config",permalink:"/docs/category/config"}},c={},u=[{value:"Declaration",id:"declaration",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"<code>health</code>",id:"health",level:3},{value:"<code>max_health</code>",id:"max_health",level:3},{value:"Return value",id:"return-value",level:2}],h={toc:u};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"calc_health_color"},"calc_health_color"),(0,n.kt)("p",null,"Calculates the color from green to red based on the given ",(0,n.kt)("inlineCode",{parentName:"p"},"health"),"."),(0,n.kt)("h2",{id:"declaration"},"Declaration"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".calc_health_color(health, max_health)")),(0,n.kt)("h2",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local text_width, text_height = Draw.calc_health_color(50, 100)\n")),(0,n.kt)("h2",{id:"parameters"},"Parameters"),(0,n.kt)("h3",{id:"health"},(0,n.kt)("inlineCode",{parentName:"h3"},"health")),(0,n.kt)("p",null,"The current health as ",(0,n.kt)("inlineCode",{parentName:"p"},"number")," which must not be higher than `max_health."),(0,n.kt)("h3",{id:"max_health"},(0,n.kt)("inlineCode",{parentName:"h3"},"max_health")),(0,n.kt)("p",null,"The maximum health as ",(0,n.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,n.kt)("h2",{id:"return-value"},"Return value"),(0,n.kt)("p",null,"If the function succeeds, the return value is the color as 32 bit hexadecimal ",(0,n.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,n.kt)("p",null,"If the function fails, the return value is ",(0,n.kt)("inlineCode",{parentName:"p"},"nil"),"."))}d.isMDXComponent=!0}}]);